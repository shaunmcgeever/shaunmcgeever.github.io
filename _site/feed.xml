<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shaun McGeever</title>
    <description>Still working this out...</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Week 6 Recap... and Week 7!</title>
        <description>&lt;p&gt;&lt;span&gt;So it’s the end of Week 7 and I have not been able to keep up with this blog. I can’t say it’s a bad thing though; it means I’ve been busy with the work DBC has given me.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;So the last time I checked in here it was the second day of Week 6. So I’ll give a quick recap of how Week 6 finished up. &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;Day 3:  &lt;/strong&gt;We were given an “Advanced” active record challenge to do in the AM, which went over many of the topics we discussed in the previous day’s lecture. Our instructor set it up so that we would have everything available in one file, including the database, so that we didn’t have to run db:drop,create,migrate,seed. This was really convenient and we didn’t have to waste any time setting up the environment every time. The challenge was to determine and model the relationships between Hotels, Rooms, Users, and Bookings. This is what the final migrations, models, and relationships look like using some of the more “advanced” techniques:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;img src=&quot;https://31.media.tumblr.com/4da6512dbee44dcb415296ad882854e1/tumblr_inline_n5t0ok6T4F1swddm8.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://31.media.tumblr.com/6fbadd5ba35ff82b54162e3aa06f7fea/tumblr_inline_n5t0r27OsC1swddm8.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;Day 4: &lt;/strong&gt;We had our Phase 2 assessment. Unlike last week, where there were four separate, independent problems, we were given one problem that included everything we had studied up to that point. The assignment was to make a Sinatra application for an event management system. We were given roughly 3 hours to complete it. It was broken into the following parts:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-Part 1: Authentication&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     Our app needed to include user authentication. We needed to let the user sign up, and then let them have the ability to sign in and out whenever they choose. During sign up, we needed to include validations on their email, specifically ones that guarantees uniqueness, proper format, and presence (every user must enter an email). Every user must also have a password. This password would be used to authenticate the user whenever they chose to sign in. However, this password could not be stored in the database. This was a great time to use the bcrypt gem. With the bcrypt gem, I was able to encrypt the users password into a hash value, making it essentially unreadable. Without knowing how bcrypt formulated this encryption, the users password would be safely, and securely, stored in my database. During user login, I could use bcrypt to translate the password entered by the user, and check if the entered password’s encryption matched the encrypted password in the database. It’s a quite mouthful to say, but it’s a really cool and useful gem.  &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-Part 2: Events&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     We needed to include the proper associations for all of our models. Specifically users and events. Users can attend many events and an event can be attended by many users. Events are user created too, so an event belongs to a user, and a user can create multiple events. We could represent these associations using: &lt;/span&gt;&lt;br/&gt;&lt;span&gt;     -user.created_events&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     and&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     -user.attended_events&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt; So those relations ended up looking like this (I included the bcrypt code as well; why not?): &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;img src=&quot;https://31.media.tumblr.com/43950d519970f8951ad0f84e528a25f4/tumblr_inline_n5t0rk4ooi1swddm8.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-Part 3: CRUD&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     The main focus of this part was to establish the main CRUD features to the events. A user should be able to create an event, show all of their created events, edit their own events, and destroy the events they have created. Pretty straight forward stuff, but I think I spent a little too much time on it making it just right (making all the pages look clean, proper line breaks, a little css, etc). Which kinda came back to bite me when I had to do:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-Part 4: AJAX!&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     When a user wanted to enter a new event, a new page would be brought up. So instead of rendering a new page with a form every time, I included the form on the users events index page. That way, the user could just add events and they would append themselves to the end of the users list in front of them. I was able to set up the form and the javascript file, but I didn’t get a chance to actually write out the code to make it append to the current list. I was able to prevent the default action of the form, parse/interpret the data using JSON, but I ran out of time before I could add the event on the server side. Another half hour and I know I would have had it done. But overall, I was happy with my performance and assessment. I understood and followed the entire assignment, I just misjudged my time a bit. In this situation, I think that’s a lesser of my worries, and is one of the things that can be easily worked on.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Overall it was a good day and I am excited to move onto Phase 3.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;Day 5 + Weekend:&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;So on Friday, they gave us the day to create any kind of app we wanted. We could create anything we want, and we would present them to the class later that day (around 5&amp;#160;pm). I worked with Phil on a cool idea he had. We wanted to make an app that would help programmers that know one programming language learn another language. For example, I could say my preferred language is Ruby, but I’d like to know how to write methods and loops in Javascript. The idea was to make a visual representation of how the code can start in the preferred language, and then transformed into the desired language. We called it Delta. We weren’t devising a formula that dynamically changed the code into the new language. We got that question a lot. Instead, we wanted to take a static picture of the original code and the final desired code, and then have a GIF image in the middle which displayed the incremental changes. We made it so users can post their own questions, specifying which languages they wanted (preferred and desired), as well as answering other users questions. This meant that a user can upload their own pictures and gifs to answer other users questions. Unfortunately, creating a GIF isn’t the easiest or most intuitive thing to do, so we plan on coming up with a way to make GIF creation easy for the user. &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;The rest of the weekend slipped away from me, it being mother’s day and all. I took the time to go over OAuth and the twitter application, mainly working with APIs and tokens. I didn’t get to work on the Delta app as much as I’d liked to.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;The current link to the application is thedelta.herokuapp.com . Phil added some SASS using Bourbon and it looks great. I hope to get back on it and make some more contributions soon.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Week 7 Recap:&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;PHASE 3!&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;So this entire week has gone by, so I’ll try to sum everything up without divvying everything up day by day. I’m still a bit in shock that it’s Phase 3 already. Time is really flying by. &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;So Monday we were introduced to Rails, and what a beast it was. It’s like Sinatra, but bigger. Much bigger. We had a few exercises that took us through the Rails documentation and conventions. We had to quickly adapt to the new framework and it’s idiosyncrasies. I was a bit taken back by the new routes file and the controller set up. Once I got a grasp of the concept that the Sinatra controller was essentially broken into two pieces, it started to make much more sense. The use of “resources” in the routes file made life pretty easy; giving us the essential routes for a proper CRUD application. Even nested routes became easy, making RESTful routing a breeze. However, we quickly learned how nasty and difficult those nested routes can be to work with sometimes (forms, etc.). Throughout the week we created a number of simple applications using Rails, such as a craig’s list clone and blog site.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;We were also introduced to the real deal Rspec. We had been practicing with it, and using it here and there, but now, we didn’t write any development code without writing a test first. This became very frustrating very quickly. I felt like my knowledge of writing good tests was holding me back and slowing me down. I wanted to create good applications, but I didn’t want to waste any time. This really put the perspective on TDD (test driven development) though. Writing test slows you down a bit, which is definitely a good thing. It keeps you from getting twisted up in logic and loops that you can’t find yourself out of. &lt;strong&gt;It keeps you from over complicating your code. &lt;/strong&gt;It helps you keep your code object oriented and simple. We were able to create rspec tests for the user features, the controllers, and the models. For the feature tests, we were able to incorporate the capybara gem, which mimics and simulates a users actions. It took a bit of time to pick up on the language and syntax, but once we got a bit into it, it was easy to formulate some tests. &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;I did however, break away from TDD, but only just a little. I wanted to explore the conventions of rails and get a good understanding of how it all tied together. I felt like I wanted to get a good grasp on one, before I tackled the other.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Our assignment for the weekend was a group assignment. Our group decided to create a music aggregator to collect music from different websites, such as SoundCloud, Hypem, and any other sites that had APIs. This project included everything we had discussed about group projects, such as stands, wire framing, retros, schema modeling, check ins, and we even used a trello board (&lt;a href=&quot;http://www.trello.com&quot;&gt;www.trello.com&lt;/a&gt;). As a test, our instructors threw a curve ball at us later Friday afternoon and told us to switch code bases with another group. Completely. So we began working on another groups projects, right where they left off. Hopefully. While it was a bit frustrating as we were all pressed for time this weekend, it was an experience. It put perspective on how important it is to keep up with notes and the group’s overall status. It’s essential for the project’s success, really. After working on the other group’s code for a bit, we where instructed to move back to our own code base. We had the choice to implement any new features added by the other group, or to just delete them entirely. The other group passed a good few of our tests for us and include a pages controller (which we hadn’t thought of), so we decided to keep it.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Over the weekend I played around with the SoundCloud API. Turns out, it’s pretty easy to work with. I didn’t have much trouble including a search bar into my application, so that the user can add almost any song on sound cloud to their own playlist (some users have privacy settings, so I can’t say any song). I was even able to embed and display a mini SoundCloud player for each song on their play list. For our first release, we only incorporated SoundCloud, but I’m confident that most of the work has been done and adding a second or third API wouldn’t be too difficult.  &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;We present Monday morning (Day 1 of Week 8). Once the app is up on Heroku, I will be sure to put the link up here. I know this was very brief, but hopefully I covered at least the surface of this past week.&lt;/span&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 19 May 2014 00:39:16 -0400</pubDate>
        <link>http://yourdomain.com/2014/05/19/week-6-recap-and-week-7/</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/05/19/week-6-recap-and-week-7/</guid>
      </item>
    
      <item>
        <title>Week 6: Day 2</title>
        <description>&lt;p&gt;&lt;span&gt;Day: 2 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;So today was full of lectures. If you would have told me I had to sit through lectures all day during my undergrad career, I don’t think I would have been the happiest camper. Today, however, was awesome. I’m not even sure that this was planned by the teachers, but there were enough questions on each topic, so they held optional lectures with Q&amp;amp;A’s. I obviously attended every one of them. I figured I&amp;#8217;d take some time this weekend to catch up on the daily exercises. I’ll try to recap everything I was exposed to today.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;The morning lecture was a bit of an extension of yesterdays exercises, mainly focused on authorization and authentication. The difference between the two: authentication is &lt;strong&gt;who you are&lt;/strong&gt;, while authorization is &lt;strong&gt;what are you allowed to do&lt;/strong&gt;. Yesterday we built an application that could send a tweet to the creators timeline. This was because the client tokens belonged to the creator of this app. We discussed how this is changed so that we can create an app that tweets to anyone’s timeline.  For example, I could get my friend in LA to sign into my app and he could use it to tweet to his own timeline. This is done using OAuth and temporary tokens. We discussed how the user can sign into my app, I then send a request to twitter, twitter sends temporary generated tokens back to me, I redirect the user to a Twitter log-in/splash page, they sign in using their credentials, and then Twitter verifies this using the temp tokens created by my app. Once the user is authorized to use their Twitter, I can use my app to store their tokens into my database. This is much more efficient than storing their twitter credentials (i.e. username and password), for obvious reasons and for not so obvious. The obvious may be that a user may not want me to have their password saved somewhere someone can access it easily. That’s a fair point. What makes it beneficial for the both the app and app user is that the user can stop the relationship between their twitter and the app at anytime. No changing of passwords is needed, only new tokens are regenerated. This is also helpful knowing that a user my have their twitter linked to many different apps. No one would be impressed if they had to change their password every time they wanted to stop using their Twitter credentials on any app. I haven’t much practice with OAuth, but just this exposure helped paint the picture for me. One of the upcoming assignments is making an app that can have a any user tweet to their own timeline. We’ll see how that goes.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;The afternoon held the gold mine. We had 4 mini lectures plus another long talk after dinner. The first topic was “advanced ActiveRecord”. Going into this, I wasn’t sure what advanced really meant. It was a bit intimidating at first, but it ended up being very cool and super useful. We discussed how to break ActiveRecord conventions. ActiveRecord is a very powerful program that can be very easy to use. However, it’s power and ease of use comes from some of the universal conventions it uses. This can become very limiting. For example, we talked ourselves into a total mess trying to describe the type of schema Twitter or Instagram has. There is an obvious User model. This User can follow other Users and other Users can follow them. So let’s make a join table connecting the Users table to the… Users table? Connecting to itself? That doesn’t seem like that would work. But what if we changed some of the names around. For example, what if a User had many Followers and Followings (things that they follow). While the naming may not be the best example, we made a clear distinction between the two. Now that we can make the different tables, we just have to tell ActiveRecord how to find these relationships. A quick example, this can be done using:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     User has_many :followers, class_name: “User”&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;This tells ActiveRecord to create the followers association, but know that it really is part of the user model/class. This, along with the other “advanced” work arounds we learned, will become more and more useful, especially when we want to create our own method names and such. It’s good to know that we do have these kinds of options and that we aren’t limited by anything in ActiveRecord.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;After ActiveRecord, we discussed a few hints and tips when working with CSS. Mainly tips dealing with CSS positioning. There have been many times when I want to move and position an object, but it just doesn’t behave like I thought it would. We went over some key concepts that we may have forgotten or overlooked at this stage in the game. For example, we touched on display vs positioning. Even though display intuitively means how it appears on the screen, it has a big impact on positioning. When using display, you have three options that affect positioning: block, inline, and inline-block. Each CSS element has a different default. For example, divs are block and spans are inline. What I took from the discussion is this. Blocks are big and chunky; they will take up the full width of the page. Inline elements are sleeker, their width fits to their context. Block-Inline elements are a hybrid of the two. They keep their large box like attribute, but they can be adjusted and modified with some styling. A quick tip was, “If it’s behaving funny, try block-inline.” Now positioning. We discussed static, relative, absolute, and fixed. Static and Fixed were easy to understand. Static is the ignored step-child. It is the default position setting, but it apparently isn’t used for anything. Fixed is as if the element is pinned to the front of the screen. Where ever you put it, it will remain there. A good example of fixed is a side or top navigation bar; something you want to see at all times, from anywhere on the page. Absolute and relative is where it gets a bit tricky. Absolute defines where it lays on the whole page, sort of like pinning it to the back of the screen. You can scroll past it and it will move with the page, but it is not within the flow of the page (e.g. text won’t be able to flow around it). Absolute elements are positioned from the upper left hand corner of it’s first relative parent. If it is not within any relative elements, it will be positioned based of the upper left hand corner of the whole web page. Relative positioning also moves the element around, but unlike absolute positioning, it remains within the flow of the page. This relationship between absolute and relative isn’t very easy to visualize at first, but I think I understand the overall idea. Of course, I’d love to get into some exercises and practice it. I found this discussion super helpful, but I’m not so sure that CSS isn’t witchcraft just yet.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;We had a surprise lecture on the bash profile. I say surprise because it’s not really in the curriculum, but enough people were asking questions about it to have a quick discussion. I think what we really wanted is to know how we can customize our own. I’ve changed the colors of my terminal and made a few aliases, but that’s about it. I don’t really know it’s full potential. So we began talking about bash and shell in general. Which led to the bash_profile, bashrc, and profile files. Which led to SSH and remote access. Which led to Unix and Linux discussions. Which led to writing basic shell scripts. Which led to just basic computer talk in general. We never actually got to the bash profile and how to customize it, but it was an awesome discussion nonetheless. &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;We had yet another discussion (review at this point?) of object oriented JavaScript. We didn’t learn to many new tips or tricks, but we just went over as a group how to properly implement constructor functions and prototype functions. I was still a bit skeptical about the concept. I understand the values of object oriented programming, don’t get me wrong, but when I am only writing a few lines of JavaScript, why take all this time to extract it into similar objects? So I asked this question to the teachers, in similar words, and kinda answered my own question. It may not be worth it when writing a small script or loop, but on a large scale, it can be crucial. We haven’t been exposed to large scale JavaScript programs/files, so we may not be able to see the applications and uses just yet. Realistically, I know how important object oriented programming is in Ruby, so I can safely assume it’s just as valuable in JavaScript&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;This set us up for a nice segway into a talk/discussion with the company’s CTO, Miles. He has a ton of experience with JavaScript, and we convinced him to give us a talk on it. I’m not sure we knew what we wanted him to talk about, or if we just wanted to learn anything we could about the foreign topic. So he laid it out simply: he was going to speak about the history of JavaScript, where it is now, and where it is going. With that I was hooked. From what I know, JavaScript has this enigma of being some ugly computing language, but everyone is “forced&amp;#8221; to use it. So I wanted to see what he had to say.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;As the story is told, JavaScript was written in ten days by Brendan Eich. At the time, Netscape was pouring a lot of time and money into creating the Java language. Netscape had plans to release it’s newest browser, and they wanted to include a nice treat of it’s new powerful language, Java, into it. Brendan Eich was tasked to create a mock language of Java to accommodate and support this new browser. They wanted it to look and feel similar to Java. So Eich completed his task and JavaScript, which was originally named to LiveScript, was released with the browser. He knew it was full of bugs and it wasn’t pretty, but he had to make deadlines. He had no idea that this language would one day take off.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;The original hype around JavaScript was very low. Nobody really cared or knew about it. Everyone was concerned with this new power house, Java. I’m fast forwarding a bit, but it wasn’t until Google’s new Gmail feature when things started to change. When you loaded Gmail, you could view your all of email and switch between emails, including inbox and outbox, without having to reload the page. This was huge. How did they do it? With JavaScript. Making requests to the server and responding back to the client without having to reload the page was totally new and innovative. The action was coined AJAX. Everyone began to realize the real power behind JavaScript, and it became more and more popular. Keep in mind that this was only around 2004-2005, only ten years ago. The technology is still very young and JavaScript libraries are still continuing to grow. It doesn’t look like anything is coming up to take it’s place either. Node JS has been created, which is a software platform that uses applications written in JavaScript. &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;I know this was a terribly condensed and brief (&amp;#8230;and shitty) summary, but it’s actually a very interesting story. I would recommend that any new programmer should take the time to do some research and read the story for themselves. It helps put some perspective on JavaScript.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;And P.S, before I forget, we obviously did two CSS drills this morning. We worked on some navigation bars and animated them to display and hide using different features like clicking or hovering. Nothing intense, but it was cool to play with some animations and jQuery.&lt;/span&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 11 May 2014 13:30:59 -0400</pubDate>
        <link>http://yourdomain.com/2014/05/11/week-6-day-2/</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/05/11/week-6-day-2/</guid>
      </item>
    
      <item>
        <title>Intro to Week 6: Day 1</title>
        <description>&lt;p&gt;It&amp;#8217;s the last week of Phase 2 and time is continuing to fly by. Managing time has been a bigger task than ever, but I&amp;#8217;m not doing too badly&amp;#8230;yet. Things may change during the end of Phase 3, but I won&amp;#8217;t worry about that just yet.&lt;/p&gt;
&lt;p&gt;Week 6 has been titled &amp;#8220;Web Apps&amp;#8221;. I forward to seeing what this all entails, but from a quick look over the weeks assignments, it looks like a lot of API work and an introduction to Heroku. Maybe I&amp;#8217;ll be able to get something up on the web sometime this week!&lt;/p&gt;

&lt;p&gt;Day 1:&lt;/p&gt;
&lt;p&gt;Today I paired with Johnathan.&lt;/p&gt;
&lt;p&gt;After presenting our weekends app projects, we had a lecture about restful routing. While restful routing isn&amp;#8217;t essential, we discussed how it&amp;#8217;s a good practice and a good convention to get used to. I know there are many conventions when developing with Active Record and Rails, so the more I can pick up early, the better. As for restful routing, it&amp;#8217;s a good way to keep your erb&amp;#8217;s and redirect URL&amp;#8217;s neat and organized. It&amp;#8217;s makes them easy to use, read, and understand.&lt;/p&gt;
&lt;p&gt;The challenges for today started with two CSS problems (surprise!), but they also incorporated some Javascript. We made a style editing bar, where the user could input a CSS selector (header, body, h1, etc), a property (background-color, padding), and then a property (red, blue, 10px, etc). The Javascript grabbed the info from these fields and changed the page accordingly. Our second challenge was to add a &amp;#8220;Add Comment&amp;#8221; button to a thread page. The button could be clicked, a text area would show with a create comment button and the add comment button would be hid. When the create button was clicked, the text would be added to the page and the create button would be hid. This one seemed a bit more applicable, but both were pretty cool, binding events to HTML/CSS selectors.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Our afternoon challenges included playing with the Twitter API. We got Johnathans Twitters API keys/tokens and make sure they had read and write permissions. We knew we had to use these tokens to make requests to twitter, but we didn&amp;#8217;t want to have them saved in our files. I had done this before in an earlier project (the random tweet generator), but we ran a bash script every time we loaded the app. This bash script would load the keys into the ENV (environment), making them usable throughout the session life of our terminal. However, this time I wanted to try it a different way. We were pointed in the direction of Dotenv. Dotenv is a gem that loads a &amp;#8220;.env&amp;#8221; from the source directory. We put our token variables into this &amp;#8220;.env&amp;#8221; and required the Dotenv gem, and all the work was done for us. It&amp;#8217;s very similar to the bash script style, but a little but less hack-y. Of course, we made sure to include the &amp;#8220;.env&amp;#8221; file in our gitignore file so that it wouldn&amp;#8217;t be pushed onto GitHub. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;We played around with the app for a while. In order to get a specific user or timeline, we had to make request to Twitter.  However, once we made the request, we should be able to hold that user value/information until we are finished with that user. In other words, we only wanted to make one call to Twitter. We didn&amp;#8217;t want to have to open up a connection everytime we wanted any of the users information, especially if we had that information literally seconds before. We tried a few different things, but eventually made a class instance of our user and their tweets (to help prevent rate limiting, we only grabbed 10 tweets). We included Active Record and created a database. This made it easy to store the users information and their tweets. Once we made the original twitter request, we could make database calls rather than opening another connection. We were also able to use a little bit of logic and make a loop that would cache the tweets. Essentially, we could check when the last time we imported tweets, and if it had been longer than 15 minutes, we would make a request to Twitter and bring in new tweets. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;With all this fun stuff, we were able to make a simple Sinatra app that posted a tweet to Johnathan&amp;#8217;s timeline (because he was the owner of the tokens). This was pretty cool to see. To be honest, I was a bit jealous, so I&amp;#8217;m sure I&amp;#8217;ll be setting this up with my own tokens soon. &lt;/span&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 07 May 2014 08:56:00 -0400</pubDate>
        <link>http://yourdomain.com/2014/05/07/intro-to-week-6-day-1/</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/05/07/intro-to-week-6-day-1/</guid>
      </item>
    
      <item>
        <title>Week 5: Day 3, Day 4, Day 5 (+Weekend)</title>
        <description>&lt;p&gt;So the end of the week definitely got busy and I wasn&amp;#8217;t able to get to this blog as much as I&amp;#8217;d have liked to. I&amp;#8217;ll recap everything briefly here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Day 3:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today I paired with with Phil.&lt;/p&gt;
&lt;p&gt;As usual, we had two CSS drills to complete for the morning. I&amp;#8217;m not sure how many times I&amp;#8217;ve actually said &amp;#8220;as usual&amp;#8221; or &amp;#8220;yet again&amp;#8221;, but it obviously appears that CSS drills in the AM have been pretty routine. So I apologize if it seems like I am repeating myself. Our drills today were creating button styled navigation bar and a drop down menu. Unfortunately I rushed through the CSS again, which I also seem to do quite often, to get to the harder assignments. It&amp;#8217;s not that I don&amp;#8217;t like CSS, I actually love it and I think is awesome (which I think I actually mentioned previously). I just think that the fundamentals of CSS are easier to grasp and that I will only get better with practice. It&amp;#8217;s unfortunate, but I think my time would be better spent learning more about all of the other languages and technologies. I know I have said it before, but I really want to chunk out some time this weekend to get some decent CSS practice in. &lt;/p&gt;
&lt;p&gt;We also had an AM lecture on JS Scope. We discussed how the scope of variables and functions affect their uses and functionality. We went over local and global variables and when it is most efficient to use them. We also discussed the uses of &amp;#8220;this&amp;#8221;, which tied into our lecture about constructor and prototype functions from the day before. JavaScript is still a bit new, but I am starting the get the hang of it. Once I wrapped my head around the constant reoccurrence of key-value pairs, it started to make a bit more sense.&lt;/p&gt;
&lt;p&gt;Our exercise for the afternoon was to create a &lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt; Clone. If you&amp;#8217;re familiar with the site, it doesn&amp;#8217;t include many flashy lights or spectacular designs. We mainly focused on the content. We used the nokogiri gem to scrape the site. We were able to pull all the titles, posts, and links. We decided to leave comments out, so that we could create our own comment feature. By the end of it, our site was looking good and functioning properly. All of our links and redirects were working and we could have different users sign in and leave comments on each post. A user can view all posts, all comments on a post, and delete their own comments. For the sake of time, we didn&amp;#8217;t include an edit comment feature. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Day 4: &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We had a Phase 2 Mock Assessment today.&lt;/p&gt;
&lt;p&gt;I believe I mentioned it before, but there is an assessment at some point during every phase. Last phase, it was a short 20 minute, one-on-one with a teacher. Phase 2, however, it is a 3 hour solo challenge. This week was only a mock assessment, so it is only practice for the real deal next week. We were told that this mock would be extremely comparable to the actual one next week, so we may see things we have not covered yet. After the three hours, we turned in what we had completed. After lunch, I sat down with one of the teachers and we took about a half hour to review everything I put together. The overall assessment looked like this:&lt;/p&gt;
&lt;p&gt;-Problem 1: Given a Users table and a Skills table, create a &amp;#8220;User_Skills&amp;#8221; table (aka Proficiency table) that shows the users experience and type of education (formal/informal) for their specific skill. &lt;/p&gt;
&lt;p&gt;-Problem 2: Style a plain, black text on a white background, blog using CSS without modifying any HTML.&lt;/p&gt;
&lt;p&gt;-Problem 3: Recreate a mock of &amp;#8220;Simon Says&amp;#8221; using AJAX. A button can be clicked and causes a random square (out of 9 total) to change color.&lt;/p&gt;
&lt;p&gt;-Problem 4: Overall Javascript scope and constructor methods.&lt;/p&gt;
&lt;p&gt;I felt rather comfortable after completing the assessment. I was able to get through the last 3 problems very smoothly (with some help from google during the Javascript problem).  I know I made a botched job of the first problem. I didn&amp;#8217;t use the correct relationship for the three models. I forgot the crucial &amp;#8220;through&amp;#8221;.  I made the following relationships:&lt;/p&gt;
&lt;p&gt;Users have many Skills&lt;/p&gt;
&lt;p&gt;Skills have many Users&lt;/p&gt;
&lt;p&gt;Skills have many Proficiencies &lt;/p&gt;
&lt;p&gt;Proficiencies belong to Skills&lt;/p&gt;
&lt;p&gt;With this information, I can grab all the skills any user may have. From there I can grab all the proficiencies associated with that skill. However, when I wanted to display all of the users with their skills and proficiencies, I realized my major error. Without a direct association of proficiencies to users, I couldn&amp;#8217;t access the information I needed when iterating through all of the users. I needed to include:&lt;/p&gt;
&lt;p&gt;Users have many Proficiencies =&amp;gt; &lt;strong&gt;through&lt;/strong&gt; Skills&lt;/p&gt;
&lt;p&gt;Proficiencies belong to Users =&amp;gt; &lt;strong&gt;through&lt;/strong&gt; Skills&lt;/p&gt;
&lt;p&gt;This allowed me to directly call and find the proficiencies for each user (i.e User.proficiencies) as well as their skills (User.skills). This gave me much more freedom when it came to displaying all of my gathered information. Unfortunately, I did not have time to fix this mistake, so it looked pretty poorly. However, I know my mistakes and I know what I need to review for next week. I thought the assessment was fun and challenging otherwise; though I won&amp;#8217;t let myself get to complacent. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Day 5 (+weekend):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today we were assigned to another group project. The task given to the group (Timmy, Justin, Phil, and myself) was to create an application that mimics Survey Monkey. Essentially, we needed to make a form submission page that would allow a user to create a survey and host it on our application. Other users could sign in and take other users surveys. All the results can be viewed. A user could delete their own surveys. &lt;/p&gt;
&lt;p&gt;As a group, we sat down and designed our schema. We used a cool application called Balsamiq to wireframe everything. Balsamiq is awesome. We were able to draw out how we wanted our final project to look. It became a map for the project. With this map, we could work independently and split the work accurately. It was easy to separate who was working on what when we had a visual representation.&lt;/p&gt;
&lt;p&gt;We also nailed down our git work flow, which was great. We decided to create a master repo and fork off of it. We could create branches off our fork. We named these forks based on their core function, for example whether it was a chore, feature, or bug fix. For (another) example, chore/creating-models was one of my branches. We could push and commit these branches to our local repos, and from there we could submit pull requests to master. After another group member was able to review that code, they could merge it to master. While working, we could pull all changes down from master (using upstream), so that we could always have the most up to date copy. This helped to avoid merge conflicts tremendously. &lt;/p&gt;
&lt;p&gt;I volunteered to work on the database relationships and models, seeing that I screwed that up during the week. I wanted the extra practice. If I had any questions, I had three other group members that could answer any of my questions.We decided on four models: User, Survey, Question, and Answer. We decided to keep everything simple for an MVP, so the answers would just be a rating of 1-5. It would essentially become a host for rating surveys. For example:&lt;/p&gt;
&lt;p&gt;How much do you like Ruby?&lt;/p&gt;
&lt;p&gt;I really don&amp;#8217;t like it, It&amp;#8217;s okay, I&amp;#8217;m indifferent, It&amp;#8217;s good!, and I love it!!&lt;/p&gt;
&lt;p&gt;Each option would have a value, ranging from 1 to 5 (1 being the lowest), respectfully.&lt;/p&gt;

&lt;p&gt;The specific relations we made were:&lt;/p&gt;
&lt;p&gt;Users have many Surveys&lt;/p&gt;
&lt;p&gt;Users have many Answers&lt;/p&gt;
&lt;p&gt;Surveys have many Questions&lt;/p&gt;
&lt;p&gt;Survey belong to User&lt;/p&gt;
&lt;p&gt;Questions have many Answers&lt;/p&gt;
&lt;p&gt;Question belongs to Survey&lt;/p&gt;
&lt;p&gt;Answer belongs to Question&lt;/p&gt;
&lt;p&gt;Answer belongs to User&lt;/p&gt;
&lt;p&gt;Unlike my assessment problem, we didn&amp;#8217;t use any through relationships. We would have liked to join Questions to Users through Surveys (so questions that the user has created), but we would have also liked to join Questions to Users through answers (questions that the user has answered). Honestly, we did not how to approach this, because both implications would have resulted in a method call User.questions. Which way would Active Record react? We didn&amp;#8217;t know. We did not use through, but we were able to access the data we needed using: &lt;/p&gt;
&lt;p&gt;User.surveys.questions&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;User.answers.questions     (include a .surveys at the end to get an array of surveys they have completed too!)&lt;/p&gt;
&lt;p&gt;We asked our teachers when they were available on Monday, and we were correct in thinking that Active Record would have a hard time understanding what was what. We learned that we could have created our own methods that would return the results we wanted. In hindsight, it seemed obvious, but we didn&amp;#8217;t think to try it. Nonetheless, our approach worked. We were able to create a fully functioning CRUD survey application (although editing surveys seems a bit silly). This application was fun to complete. I was able to add a pie chart to the results page and totally surprised myself. During wire framing, I made the joke that we should include graphs and charts. It was only a joke because we wanted to keep it MVP, and none of us have ever seen anything like that before. But sure enough, my group member Phil found a cool pie-chart visualization in the Google JS API. The challenge was accepted. Phil and I worked with the DOM to grab the numbers off the results page and used some more javascript to load the data into the pie chart function. This was crucial because it did not need to make another database call, and it was rendered on each page as it loaded. This was great javascript practice and it added a great feature to our app. After that, I worked on some parts here and there, including the display pages of taking surveys, the user&amp;#8217;s profile page, and the deleting survey function (obviously a user can only delete a survey they have created). Our CSS was pretty basic. We have a static top nav bar that is completely functional and adds a bit of character. I also forgot to mention that we used the Bcrypt gem to add a bit of security to our passwords and user authentication. I hadn&amp;#8217;t used it before, but it&amp;#8217;s awesome. It takes in a password and randomly generates a long number-letter string to store into the database, rather than storing the user&amp;#8217;s actual password.  Cool stuff. Overall it was a good project and I was pleased with the outcome. My git work flow was definitely improved and I am feeling much more confident using git. &lt;/p&gt;
&lt;p&gt;I was able to find some spare time on Sunday to put some time into practicing the mock assessment. I redid the Active Record assignment and feel really good about it. I think I made a simple mistake the first time around, but now I know I have it down solid. I&amp;#8217;ll probably review the other few topics sometime this week before the real deal assessment.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So much for briefly&amp;#8230;&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 05 May 2014 21:20:00 -0400</pubDate>
        <link>http://yourdomain.com/2014/05/05/week-5-day-3-day-4-day-5-weekend/</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/05/05/week-5-day-3-day-4-day-5-weekend/</guid>
      </item>
    
      <item>
        <title>Week 5: Day 2</title>
        <description>&lt;p&gt;Today I paired with Justin.&lt;/p&gt;

&lt;p&gt;So today we had two CSS drills to complete again, however Justin and I skipped them. We moved on to the more difficult JavaScript exercises. I do plan on coming back to the CSS drills though, hopefully sometime this weekend. Our exercise for the day was to make our JavaScript version of Ruby Racer include more OOP (object oriented programming) and make it more D.R.Y. (and if I haven&amp;#8217;t stated this already: Don&amp;#8217;t Repeat Yourself). It proved to be a very challenging exercise. Justin and I are both more experienced with Ruby syntax, so working through the JavaScript logic was troublesome once again. We used the same game setup that I had created yesterday. We began to implement a sign in dialog box for two different users. We created the database, schema, migrations, tables, and models. We began working on the controller functions and how our application/game would send the information around using AJAX. However, we were severely held up by the front end. This is where our lack of JavaScript experience pulled us down, We could&amp;#8217;t get the form to submit the information as we wanted it to. The logic of the game would constantly break and we would have to back track to fix our errors. We wanted to be able to move on, but unfortunately having the game start and finish properly was a key component to having a properly functioning back end. &lt;/p&gt;
&lt;p&gt;We did eventually get a functioning front end, without any flaws. From there, we had used a huge chunk of time. I almost typed &amp;#8220;wasted a lot of time&amp;#8221;, but as I think about it, I know it wasn&amp;#8217;t a waste. From today alone, my jQuery skills and overall JavaScript syntax has improved tremendously. By the end of it, I was able to pick out any element and add or remove CSS classes with ease. And that was definitely fun to learn. Also, finally getting down the proper format of a JavaScript if/else statement and becoming more comfortable with JavaScript overall was a small victory.&lt;/p&gt;
&lt;p&gt;But as I said, we had spent a lot of time messing with the JavaScript and front end. When it came down to using AJAX to send our inputs/messages to create our Users and Games, we decided to skip it. We both felt like we had practiced the Ruby back end enough to move past it. We had been practicing that all last week. It would have certainly been a challenge, don&amp;#8217;t get me wrong,  but due to a lack of time we decided to put our newly learned OOP in Javascript to the test. We had a lecture on OOP in Javascript today, so we discussed the importance of Objects. We learned the different ways to create Objects and when/where/why/how these ways are best used. I&amp;#8217;ll be honest, I didn&amp;#8217;t quite understand most of the lecture, but I did understand the importance of it all. Just like many things overlap from language to language, I can see the many similarities of JavaScript Objects to Ruby Objects. I know they are crucial to learn and it will be imperative to use them in my code, so I know this isn&amp;#8217;t a topic to breeze over. Hence why Justin and I tried to get into it in today&amp;#8217;s challenge, rather than messing with Ruby elements we were already comfortable with. We were able to refactor quite a bit, and we did learn a great deal, especially with assigning attributes and prototype functions. I am still a bit fuzzy on most of it though, but we will be touching on it again on lecture again tomorrow, and now I know the right questions to ask.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Apr 2014 23:20:06 -0400</pubDate>
        <link>http://yourdomain.com/2014/04/29/week-5-day-2/</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/04/29/week-5-day-2/</guid>
      </item>
    
      <item>
        <title>Week 5: Day 1</title>
        <description>&lt;p&gt;Week 5 (Week 2 of Phase 2) is Front End. I am excited to see what the challenges will hold.&lt;/p&gt;

&lt;p&gt;Today we presented our projects from the past weekend. It was great to see how everyone faired up. Every group went over what they struggled with technically and personally within the group. We didn&amp;#8217;t have many personal issues this time around, but we did, like many of the groups, struggle with the git work flow. So we will be going over that this week, which ends up working out pretty well.&lt;/p&gt;
&lt;p&gt;During our lecture for the day, we went over some of the uses of javascript. We examined a blog page with many posts and each post having tags. As a whole group, we discussed and created created radio buttons to filter through all, published, and unpublished posts. This wasn&amp;#8217;t too difficult as published was a direct attribute of the post. We also created a search bar to search through the posts for specific tags. This was all done using javascript to add hidden classes to the posts. We did something similar for our flashcard app this past weekend. However, with any tag, it becomes a little more difficult; tags were created as a separate objects. We can set the tag_name attribute in the post model so that its easily accessible from the view. We can then iterate through all the posts and identify which we want to hide and which we want to show.&lt;/p&gt;
&lt;p&gt;As for exercises, I paired with Timmy today. My group of four for the week consists of Timmy, Justin, and Phil. Our first two exercises were once again some CSS styling drills. We created a fixed+side navigation bar, as well as messed around with DOM manipulation using Chrome Developer tools. This was really just to practice grabbing different kinds of elements using jQuery. It&amp;#8217;s really useful to see what you can do in real time, and then apply that information when creating a javascript file.&lt;/p&gt;
&lt;p&gt;Our final exercise was to recreate the &amp;#8220;RubyRacer&amp;#8221; exercise, but this time using only javascript. As a reminder, the point of RubyRacer was to print and display a small board and have players advance across the board a certain amount of spaces determined by a randomly generated number. This proved to be a bit difficult, as it was the first time we were introduced to real javascript logic. It took some time to get adjusted to the syntax, but eventually it worked out. I was able to have each players car advance whenever a key was pressed (&amp;#8220;Q&amp;#8221; for player one and &amp;#8220;P&amp;#8221; for player two). The random luck was removed, but it&amp;#8217;s not like it requires much skill&amp;#8230; We added some css and formatting so that it looked pretty cool as well. We will be adding to this assignment tomorrow by adding some backend logic.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Apr 2014 00:23:00 -0400</pubDate>
        <link>http://yourdomain.com/2014/04/29/week-5-day-1/</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/04/29/week-5-day-1/</guid>
      </item>
    
      <item>
        <title>Week 4: Recap</title>
        <description>&lt;p&gt;So this weekend I focused most of my time on the Flashcard app we were making. It came out nicely and I was very happy with the results. We were able to add all the features we wanted, including user login, calculating percent correct, viewing all previous rounds, and viewing all scores per deck. The viewing of past results and scores were specific to the user that was logged in, so we were thinking of adding a high score method to show the highest score from all users. We even implemented some AJAX, specifically when the user enters their answer. The answer is sent to the server, it is checked against the correct answer, and then sent back to the same page without having to reload. A hidden box was displayed using JavaScript, showing the user if they were correct or incorrect, and their score was updated accordingly.&lt;/p&gt;
&lt;p&gt;During the project, I worked mainly with my partner on the backend portion of it. We were working more on the models and controllers, and how the information was sent from page to page. I was involved with the front end, but my other group members took care of the actual styling. We incorporated a lot of Bootstrap and it came out looking very nicely. I would have loved to be totally involved in both parts, but unfortunately that&amp;#8217;s not how it works. I am glad I worked on the backend though. I feel like I was able to get the well needed practice of new topics from the past week. I have a good understanding of how CSS and styling works, so I didn&amp;#8217;t feel like I was missing out on too much (although extra practice is never a bad thing). We will be presenting our projects to the other groups tomorrow, so we will see how ours sizes up. Either way, I was very pleased with the overall experience of this project. I know some projects/group member can hit many obstacles rather quickly, but I feel like we did a good job managing everything.&lt;/p&gt;
&lt;p&gt;Currently, the app is still on Sinatra, so it can only be run locally. Depending on what we decide as a group, we may stop here or we may throw it up on the web somewhere. I&amp;#8217;ll have to discuss that with the group.&lt;/p&gt;

&lt;p&gt;As for a weekly recap, this flashcard app really captured everything. Everything I practiced and struggled through during the week came together in this one project. I went from &amp;#8220;what the hell is AJAX&amp;#8221; to &amp;#8220;we NEED to have AJAX here, it will be awesome&amp;#8221; and implemented it. Even aside from AJAX,  from rendering new pages and redirecting, to implementing ActiveRecord on the backend, it was incredible to see everything come together. It was a good result after a frustrating week; I feel like I have learned so much already.&lt;/p&gt;
&lt;p&gt;I will say, however, I still need to touch up on my git skills. On my local computer and github I am perfectly fine. However, when different forks, branches, etc get involved, I start to lose touch. For example, setting my remote settings and upstream/downstream kinds of things. Learning that this up coming week will be my own personal goal.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Apr 2014 22:15:00 -0400</pubDate>
        <link>http://yourdomain.com/2014/04/27/week-4-recap/</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/04/27/week-4-recap/</guid>
      </item>
    
      <item>
        <title>Week 4: Day 3, Day 4, and Day 5</title>
        <description>&lt;p&gt;&lt;strong&gt;Day 3:&lt;/strong&gt; Today I paired with Brendan&lt;/p&gt;
&lt;p&gt;The first exercise of the day was to take a functioning app and replace some of the functionalities with AJAX. The app displayed a button that allowed you to &amp;#8220;roll a dice&amp;#8221; it would randomly display one of six images, corresponding to each side of a dice. The app would reload the page every time with this new image. Our goal was to use AJAX and gather the information needed and display the new image without reloading the page entirely. It was a simple concept, but implementing the AJAX was a bit troublesome. This was our first assignment with local images. The lecture and assignments from the previous day definitely helped, but it still wasn&amp;#8217;t as easy as 1-2-3. By the time I finished though, I definitely had a good understanding of AJAX and it&amp;#8217;s uses and advantages. The second exercise was to create a URL shortener (something similar to bitly). This exercise really focused on redirects and utilizing the database. I was able to redirect and navigate through our webpage, all while creating new entries and retrieving entries from the database when needed. The overall flow of a web app was making morse sense.&lt;/p&gt;
&lt;p&gt;Our lecture for the day was about sessions and cookies. I&amp;#8217;ve always had a rough understanding of cookies, but it was great to discuss what they are actually used for. Although I didn&amp;#8217;t need to implement them in any of my assignments today, I know I will be soon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Day 4:&lt;/strong&gt; Today I paired again with Brendan&lt;/p&gt;
&lt;p&gt;Our first exercises for the morning were a few CCS drills. We worked on typesetting and Page Navigation. They weren&amp;#8217;t too crazy, but I definitely enjoy it. I&amp;#8217;ve never been one to draw or do anything artistic really, but I&amp;#8217;ve always dreamed to be able to. I feel like this may be my way of art that I&amp;#8217;ve been looking for. It&amp;#8217;s like structured, well planned and thought out, designed kind of art. I look forward to making a fully functional app and then taking the time to making it look aesthetically awesome. The back end exercises for the day were blog related exercises. For example, we first created an anonymous blog. Any one could post to this blog and view all the posts created. Each post could have tags, which introduced a tricky situation in our database (a many to many relationship), but it came out nicely with the addition of a join table. After this app created, we moved on to creating users and authentication. The plan was that users can sign in, view all posts but edit and delete their posts. This is where the lecture from yesterday came into play. I was able to store some of the user&amp;#8217;s information in the session, like the user&amp;#8217;s id, so that I could keep track of it as I redirected from page to page. The authentication was cool too; we took the input information from the user and checked it against the data in the database. Essentially, we took the email the user had inputted, checked the database for that email, and checked to see if the password the user also filled matches the password stored in the database. There were also a few validations (utilizing ActiveRecord) during sign up to verify that emails were unique, properly formatted, and that no fields were left blank. I quickly learned that ActiveRecord returns very helpful error messages if any of these validations fail, and it was very easy to work with. We also had a logout feature which essentially cleared all stored information from the session. I was able to grasp all the logic behind the log in/out, authentication, and sessions, so it was a great exercise for me. I definitely had fun.&lt;/p&gt;
&lt;p&gt;We also had a few discussions throughout the day covering any questions with AJAX and jQuery. So I am picking it up better day by day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Day 5: &lt;/strong&gt;Today was a group project day. My previous pairs for the week made up our group. So it was Adam, Brendan, Neal, and myself.&lt;/p&gt;
&lt;p&gt;We had a lecture to begin the day. We went over &amp;#8220;Stands&amp;#8221; and their uses in the workplace. I&amp;#8217;m not sure if it&amp;#8217;s a tech-wide thing, but I&amp;#8217;m sure each company has a variation or something similar. We discussed how to break up the work, like we discussed last week, but we also added in how to keep status of all the work. For example, our group can hold a quick meeting and each member can say what they&amp;#8217;re working on and if they are being &amp;#8220;blocked&amp;#8221; by anything. Being blocked is essentially waiting on any type of information or work from anyone else; something that is holding you back from completing your assigned work. As a whole group, we did a mock of creating a blog application. We discussed how to decide what tasks are critical to complete and which can be put in the &amp;#8220;ice-box&amp;#8221; and held off for a later date. From the tasks that are critical to complete, we went over how to decide how time will be managed. As a group we would decide how much time we thought it would take to complete each task. For example 2 hours to create and seed the databases, 1 hour to create user authentication, etc. We decided what would be done in 8 hours and where we should be at the end of the day. We also agreed to check in throughout the day to make sure everyone was still on track and to see how everything was progressing. I&amp;#8217;ve had prior experience with this stuff at my old job, but we did it on a weekly basis. The daily meet ups definitely make more sense, especially when there can be heavy dependancies on others to complete their work for the project to move forward.&lt;/p&gt;
&lt;p&gt;The assignment for our group (which was the same for every group) was to create a flash card app. I immediately liked the idea of the project, as we had already created a similar app, but we only used ruby. So I had a rough idea of what we needed to do, but just to implement our new web/server/database skills. Essentially, our app would display a card, and the user would enter an answer, and we would check to see if that answer was correct. We would create users, multiple decks, and a scoring system. As a group we designed our schema and what functions our app would have. We decided what we wanted to have done by the end of the day, split up the work, and agreed to check in throughout the day with each other. Adam and I worked together on creating the models and the authentication process. I was able to practice the authentication process, like I had done in the earlier in the week. I feel really comfortable with that at this point. We then moved on to making methods to check if the answer is correct and to update the user&amp;#8217;s score respectively.  We struggled a bit with the git work flow, so I know I need to practice on my git commands. I know what I want to do with git, but sometimes I just don&amp;#8217;t know the proper commands, e.g. reverting to a previous commit. I also need to go over the merge concept. We worked on separate files for the most part, so we avoided most merge conflicts, but we did hit one or two.&lt;/p&gt;
&lt;p&gt;At the end of the day we had our app functioning well. It did all the basic functions that we had set out to do. We even added some Bootstrap for CSS, so it didn&amp;#8217;t look to bad either. We were all happy with that. We all worked together, so I think we were lucky. We witnessed a few groups struggling to make any kind of progress. We had some ideas of new things to implement, like high score and allowing the user to implement their own decks, so we may add those features (as well as overall styling and appearance) over the weekend. However, our biggest assignment from the instructors was to take our app and implement AJAX functions when possible. That task is a bit more daunting, but it will be great practice and I&amp;#8217;m sure we will be able to get it done. I hope to get most of that done, as well as taking some time to review JavaScript, jQuery, and Git flow this weekend.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Apr 2014 18:45:48 -0400</pubDate>
        <link>http://yourdomain.com/2014/04/26/week-4-day-3-day-4-and-day-5/</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/04/26/week-4-day-3-day-4-and-day-5/</guid>
      </item>
    
      <item>
        <title>Week 4: Day 2</title>
        <description>&lt;p&gt;Today I paired with Adam.&lt;/p&gt;
&lt;p&gt;Our first two assignments were with HTML and CSS. We made a tabbed interface, as well as a blog page with a fixed, top navigation bar. These two were relatively simple, and didn&amp;#8217;t take much time to complete. It was actually really fun. In our first lecture of the day, we covered some JavaScript. We went over some DOM manipulation and reviewed JavaScript functions. I&amp;#8217;m still a bit uncomfortable with the functions, but I&amp;#8217;m getting good practice with the exercises. &lt;/p&gt;
&lt;p&gt;In the afternoon we had two exercises with debugging a Sinatra app and an asynchronous form. The debugging Sinatra app exercise was a good one. The difference between get and post was really drilled in. We debugged a few errors and used puts statements to make our way through the app. We were able to follow the flow through the app. Once the app was running smoothly. We added a basic form and implemented a number of options, e.g. radio buttons, drop down lists, check boxes, and a text area. With these options, we examined how the parameters were passed along the back end side, using the console.  The second exercise, the asynchronous form, was a lot tougher. The point of an asynchronous form is to send and receive data to/from the server without reloading the current webpage. We knew we needed to perform some kind of combination of ajax and javascript, so we tried to put a few things together. However, we really couldn&amp;#8217;t figure it out. We had a general idea of logic, but general syntax really limited what we could actually do. We did our best before the afternoon lecture, but sure enough, the topic of the afternoon lecture was ajax. We went over how the ajax method works along with Javascript, JSON, and jQuery. We went over a few ajax methods, but specifically the post and &amp;#8220;.done()&amp;#8221; methods. Well we went over a few others, but these two were the ones we were missing from our afternoons assignment. After implementing these two methods, we hit a few more syntactical road bumps, but we eventually muscled our way to an answer. Once again, I hope the struggle pays off and really drills the concept into knowledge.&lt;/p&gt;
&lt;p&gt;All the new languages are a bit overwhelming, but hopefully it&amp;#8217;ll all come together in the next few weeks. &lt;/p&gt;
</description>
        <pubDate>Tue, 22 Apr 2014 23:35:00 -0400</pubDate>
        <link>http://yourdomain.com/2014/04/22/week-4-day-2/</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/04/22/week-4-day-2/</guid>
      </item>
    
      <item>
        <title>Phase 2: Week 4: Day 1</title>
        <description>&lt;p&gt;So today marks the start of Phase 2. In Phase 2, we will be studying and introducing ourselves to many new technologies. We will be getting deeper into HTML, CSS, and Javascript, as well as bringing jQuery, HTTP, Ajax, Sinatra, OAuth, and Background Jobs into the mix. I can&amp;#8217;t say I have even heard of OAuth and Background Jobs, but I am excited to learn them all. &lt;/p&gt;
&lt;p&gt;Phase 2 will look something like this:&lt;/p&gt;
&lt;p&gt;Week 1: Web Fundamentals&lt;/p&gt;
&lt;p&gt;Week 2: Front End&lt;/p&gt;
&lt;p&gt;Week 3: Web Apps &lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t wasn&amp;#8217;t given an outline of learning goals for the week, but I&amp;#8217;ll still go over what we go through day by day.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Day 1:&lt;/strong&gt; Today I paired with Neal.&lt;/p&gt;
&lt;p&gt;Today the new cohort of 22 students came in. They will begin Phase 1, just like I did three weeks ago. I&amp;#8217;m sure they&amp;#8217;ll have a good amount of questions for us that have completed Phase 1, so I look forward to that. It&amp;#8217;ll help keep me on my Ruby-toes while I work on my Front End skills. Today we began working on CSS and HTML styling sheets. We did basic layout challenges, reformatting blogs to have left hand, right hand, and top navigations. We had a lecture on the internet as a whole and basically how it works, specifically the relationship between the client and the server. We went over Get, Post, Put, and Delete. Very similar to SQL&amp;#8217;s CRUD methods. We also went over a standard Sinatra skeleton and how it is implemented.&lt;/p&gt;
&lt;p&gt;In the afternoon we opened up Sinatra for ourselves. We did a few small, quick challenges to get ourselves used to the skeleton. We then jumped into a more difficult challenge. We made a small application/webpage that receives a user input and returns all possible anagrams of that word. We loaded a 250,000 dictionary into a database. We combined Ruby, ActiveRecord, HTML, and Sinatra to produce this program. It was close to mind blowing when I used an embedded Ruby file for the first time. It was very different to be able to use Ruby code in a HTML document. After we got the app running, we tweaked our existing Ruby code to make it more efficient. We adjusted our queries to the database and we were able to produce the answers a bit faster. &lt;/p&gt;
&lt;p&gt;I really look forward to learning some front end skills. For the past 3 weeks (plus 12 weeks of Phase 0) we have only made apps that run out of the console. I can&amp;#8217;t wait to bring some life to these programs.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Apr 2014 00:17:00 -0400</pubDate>
        <link>http://yourdomain.com/2014/04/22/phase-2-week-4-day-1/</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/04/22/phase-2-week-4-day-1/</guid>
      </item>
    
  </channel>
</rss>
